/*
 MIT License - based on https://www.shadertoy.com/view/Ms2SWW (license in shader code)
 Article: https://iquilezles.org/articles/tunnel/
*/

package main

var Depth float
var RotateTextureZInterval float
var LightPosition vec2

func grayValue(clr vec3) float {
	return 0.299 * clr.r + 0.587 * clr.g + 0.114 * clr.b
}

func getHeight(index float, uv vec2) float {
	var sclr vec3
	
	if index < 1. {
		sclr = imageSrc1UnsafeAt(uv).rgb
	} else if index < 2. {
		sclr = imageSrc2UnsafeAt(uv).rgb
	} else {
		sclr = imageSrc3UnsafeAt(uv).rgb
	}

	return grayValue(sclr)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	const (
		ratio = 9. / 16.
		pi = 3.1415927
		texturesCount = 3.
	)

	origin, size := imageSrcRegionOnTexture()
    p := (texCoord-origin)/size * 2. - 1.
	p.y *= float(ratio)

    a := atan2(p.y, p.x)
	r := length(p)
    uv := vec2(0.3/r + Depth, a/pi)
	uv2 := vec2(uv.x, atan2(p.y, abs(p.x))/pi)
	uv2 = mod(uv2 * size, size)
	// Height value
	index := mod(uv.x / RotateTextureZInterval, texturesCount)
	h := getHeight(index, origin+uv2)
	// Magnet color
	size = imageSrcTextureSize()
	x := mod(uv.x, size.x)/size.x
	cmpl := imageSrc0UnsafeAt(
		origin+vec2(x, 0.),
	).rgb
	// Resulting color
	clr := (h+cmpl*h)/2.
	
	// Normal value
	size = imageSrcTextureSize()
  	size.y *= (9./16.)
  	step := vec2(1. / size)
  	h1 := getHeight(mod((uv.x+step.x) / RotateTextureZInterval, texturesCount), origin+uv2 + vec2(step.x, 0.))
  	v1 := getHeight(index, origin+uv2 + vec2(0., step.y))
	na := vec2(h) - vec2(h1, v1)
	na *= 15.
	normal := vec3(na+0.5, 1.)	
	// return vec4(normal, 1.)
	// Apply lighting
	n := normalize(normal.xyz*2.-1.)
	l := normalize(vec3(
		LightPosition.xy-position.xy,
		150.,
	))
	d := length(LightPosition.xy-position.xy)/imageDstTextureSize().x
	d = clamp(d, 0., 1.)

	diffuse := max(0., dot(n, l))
	ambient := 0.15
	intensity := ambient + diffuse
	intensity *= (1. - d)
	intensity *= 1.5

	return vec4(clr*(r*2.), 1.)*intensity
}